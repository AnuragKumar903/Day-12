#include <iostream>

// Definition for singly-linked list node
struct Node {
    int data;
    Node* next;
    Node(int val) : data(val), next(nullptr) {}
};

// Function to print the linked list
void printLinkedList(Node* head) {
    Node* current = head;
    while (current != nullptr) {
        std::cout << current->data << " ";
        current = current->next;
    }
    std::cout << std::endl; // Print newline at the end
}

int main() {
    // Creating a linked list: 10 -> 20 -> 30 -> 40
    Node* head = new Node(10);
    head->next = new Node(20);
    head->next->next = new Node(30);
    head->next->next->next = new Node(40);

    // Print the linked list
    printLinkedList(head);

    // Clean up memory (not shown: should be done to prevent memory leaks)
    return 0;
}

#include <iostream>

// Definition for singly-linked list node
struct Node {
    int data;
    Node* next;
    Node(int val) : data(val), next(nullptr) {}
};

// Function to insert a new node at the end of the linked list
void insertAtEnd(Node*& head, int data) {
    Node* newNode = new Node(data);
    if (head == nullptr) {
        head = newNode; // If the list is empty, the new node becomes the head
        return;
    }
    Node* current = head;
    while (current->next != nullptr) {
        current = current->next; // Traverse to the last node
    }
    current->next = newNode; // Insert the new node at the end
}

// Function to print the linked list (for testing purposes)
void printLinkedList(Node* head) {
    Node* current = head;
    while (current != nullptr) {
        std::cout << current->data << " ";
        current = current->next;
    }
    std::cout << std::endl; // Print newline at the end
}

int main() {
    // Creating a linked list: 10 -> 20 -> 30
    Node* head = new Node(10);
    head->next = new Node(20);
    head->next->next = new Node(30);

    // Insert a new node with data 40 at the end
    insertAtEnd(head, 40);

    // Print the updated linked list
    printLinkedList(head);

    // Clean up memory (not shown: should be done to prevent memory leaks)
    return 0;
}

